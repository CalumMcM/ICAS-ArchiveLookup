@{
	ViewBag.Title = "TPS Class Query";
}

<div class="jumbotron">

	<img src="ICASLogo.png">
	<h1>
		TPS Class Query
		<div class="underline"></div>
	</h1>
	<p>Select the criteria for your search: </p>

	<button id="sdInputButton" onclick="showInput('sdInput')" class="addBtn">Start Date</button>
	<button id="edInputButton" onclick="showInput('edInput')" class="addBtn">End Date</button>
	<button id="classInputButton" onclick="showInput('classInput')" class="addBtn">Class</button>

	<p id="sdInputText" class="lead">
		Start Date:
		<input type="date" id="sdInput" class="input-lookup" name="sd">
	</p>

	<p id="edInputText" class="lead">
		End Date:
		<input type="date" id="edInput" class="input-lookup" name="ed">
	</p>

	<p id="classInputText" class="lead">
		Class:
		<input list="classes" id="classInput" class="input-lookup" name="class">
		<datalist id="classes">
			<option value="TPC">
			<option value="TPS">
			<option value="TPE">
		</datalist>
	</p>

	<div class="copySelectDropdown">
		<p><button id="submitButton" onClick="processQuery()" class="btn btn-primary btn-lg">Submit</button></p>
		<div id="loadingIcon" class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
	</div>
	<div id="ResultsHeader" class="resultsHeader">
		<h1>
			Results
			<div id="resultsUnderline" class="underlineResults"></div>
		</h1>
	</div>

	<div id="StudentsHeader" class="resultsHeader">
		<h2>
			Students<div id="billingUnderline" class="underlineResults"></div>
		</h2>
	</div>
	<div class="copySelectDropdown">
		<button id="StudentscopyButton" onclick="copy('Students')" class="copyBtn">&#x1F4CB</button>
		<button id="StudentscopySelectButton" onclick="showCopyDropdown('Students')" class="copyBtn">+</button>
		<div id="StudentsDropdown" class="copySelectDropdown-content">
			<button id="icascncSCopyButton" onclick="copySelectButton('icascncSCopy', 'Students')" class="addBtn">ICAS CONTACTNUMBERCALC</button>
			<button id="fullnameSCopyButton" onclick="copySelectButton('fullnameSCopy', 'Students')" class="addBtn">FULL NAME</button>
			<button id="workcitySCopyButton" onclick="copySelectButton('workcitySCopy', 'Students')" class="addBtn">WORK CITY</button>
			<button id="homecitySCopyButton" onclick="copySelectButton('homecitySCopy', 'Students')" class="addBtn">HOME CITY</button>
			<button id="companynameSCopyButton" onclick="copySelectButton('companynameSCopy', 'Students')" class="addBtn">COMPANY NAME</button>
			<button id="customertypeSCopyButton" onclick="copySelectButton('customertypeSCopy', 'Students')" class="addBtn">CUSTOMER TYPE</button>
			<button id="tpssubjSCopyButton" onclick="copySelectButton('tpssubjSCopy', 'Students')" class="addBtn">TPS SUBJECT</button>
			<button id="concawardSCopyButton" onclick="copySelectButton('concawardSCopy', 'Students')" class="addBtn">CONCESSION AWARDED</button>
			<button id="icassdCopyButton" onclick="copySelectButton('icassdSCopy', 'Students')" class="addBtn">ICAS STARTDATE</button>
		</div>
	</div>
	<div id="StudentsContainer" class="minotron">
		<table id="StudentsResultsTable" class="resultsTable">
			<tr></tr>
		</table>
	</div>
	<p id="clipboard" class="clipboard"></p>
	<p id="queryResults" class="queryResults"></p>
	<p id="queriesLoaded" class="queryResults"></p>
</div>
<script src="~/Scripts/moment.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="~/Scripts/lodashCore.js" type="text/javascript"></script>
<script>
	const getBtnNames = () =>["sd", "ed", "class"];
	const getClassNames = () =>["START_DATE", "END_DATE", "CLASS"];
	const getCopyBtnNames = () => ["icascncS", "fullnameS", "workcityS", "homecityS", "companynameS", "customertypeS", "tpssubjS", "concawardS", "icassd"];
	const getCopyFields = () =>["ICAS_CONTACTNUMBERCALC", "FULL_NAME", "WORK_CITY", "HOME_CITY", "COMPANY_NAME", "CUSTOMER_TYPE", "TPS_SUBJECT", "CONCESSION_AWARDED", "ICAS_STARTDATE"];

	function showInput(input) {
		let inputText = document.getElementById(input);
		let inputTextTitle = document.getElementById(input + "Text");
		let button = document.getElementById(input + "Button");
		if (inputText.style.display == "none" || button.style.backgroundColor == "") {
			inputText.value = "";
			inputText.style.display = "block";
			inputTextTitle.style.display = "block";
			button.style.backgroundColor = "#20A64B"
		} else {
			inputText.style.display = "none";
			inputTextTitle.style.display = "none";
			button.style.backgroundColor = "#C00A27";
		}
		showSubmit();
	}
	function showSubmit() {
		let btnNames = getBtnNames();
		let active = 0;
		for (let button in btnNames) {
			if (document.getElementById(btnNames[button] + "InputButton").style.backgroundColor === "rgb(32, 166, 75)") {
				++active;
				document.getElementById("submitButton").style.display = "block";
			}
		}
		if (active == 0) {
			document.getElementById("submitButton").style.display = "none";
		}
	}
	function copy(table) {
		let btnNames = getCopyBtnNames(table);
		let classNames = getCopyFields(table);
		let chosenFields = [];
		for (let button in btnNames) {
			if (document.getElementById(btnNames[button] + "CopyButton").style.backgroundColor == "rgb(32, 166, 75)") {
				chosenFields.push(classNames[button]);
			}
		}
		if (chosenFields.length == 0) {
			chosenFields = classNames;
		}
		console.log(chosenFields);
		constructClipboard(chosenFields);
		let clipboardContents = document.getElementById("clipboard").innerHTML;
		let itemsToCopy = document.createElement("textarea");
		document.body.appendChild(itemsToCopy);
		itemsToCopy.value = clipboardContents;
		itemsToCopy.select();
		document.execCommand("copy");
		console.log("copied!");
		document.body.removeChild(itemsToCopy);
		document.getElementById(table+"copyButton").innerHTML = '&#10004';
	}
	function copySelectButton(buttonID, table) {
		currentColour = document.getElementById(buttonID + "Button").style.backgroundColor;
		document.getElementById(table+"copyButton").innerHTML = '&#x1F4CB';
		if (currentColour == "rgb(192, 10, 39)" || currentColour == "") {
			document.getElementById(buttonID + "Button").style.backgroundColor = "#20A64B";
		}
		else {
			document.getElementById(buttonID + "Button").style.backgroundColor = "#C00A27";
		}
	}
	function showCopyDropdown(table) {
		document.getElementById(table+"Dropdown").classList.toggle("show");
	}
	function processQuery() {
		console.log(document.getElementById("classInput").value);
		document.getElementById("loadingIcon").style.display = "block";
		document.getElementById("queriesLoaded").innerHTML = 0;
		let btnNames = getBtnNames();
		let classNames = getClassNames();
		let inputs = {}
		let dateTypesObjects = $('input[type=date]').map(function () { return this.id; }).get();
		for (let button in btnNames) {
			if (document.getElementById(btnNames[button] + "InputButton").style.backgroundColor == "rgb(32, 166, 75)") {
				if (dateTypesObjects.includes(btnNames[button] + "input")) {
					inputs[classNames[button]] = moment(document.getElementById(btnNames[button] + "Input").value).format('YYYYMMDD');
				}
				else {
					if (btnNames[button] + "Input")
					inputs[classNames[button]] = document.getElementById(btnNames[button] + "Input").value;
				}
			}
		}
		let xhttp = new XMLHttpRequest();
		xhttp.open("POST", 'api/Tpsclassenrolementswithdda', true);
		let MOCKqueryResults;
		xhttp.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				var queryResults = this.response
				queryResults = $.parseJSON(queryResults);
				document.getElementById("queriesLoaded").innerHTML = document.getElementById("queriesLoaded").innerHTML + 1
				displayResults(queryResults);
				document.getElementById("queryResults").innerHTML = JSON.stringify(queryResults);
			}
		};
		xhttp.setRequestHeader('Content-Type', 'application/json');
		xhttp.send(JSON.stringify(inputs));

	}
	function displayResults(inputs) {
		document.getElementById("loadingIcon").style.display = "none";
		//Delete previous table if it exists:
		tableDemolisherAndDisplayer("Students");
		tableBuilder(inputs, "StudentsResultsTable", getCopyFields())
	}
	function tableDemolisherAndDisplayer(tableName) {
		//Demolisher
		for (var i = document.getElementById(tableName + "ResultsTable").rows.length; i > 0; i--) {
			document.getElementById(tableName + "ResultsTable").deleteRow(i - 1);
		}
		//Displayer
		document.getElementById(tableName + "Container").style.display = "block";
		document.getElementById(tableName + "Header").style.display = "block";
		document.getElementById(tableName + "copyButton").innerHTML = '&#x1F4CB';
		document.getElementById(tableName + "copyButton").style.display = 'block';
		document.getElementById(tableName + "copySelectButton").style.display = "block";
	}
	function tableBuilder(queryResults, tableName, headers) {
		let table = document.getElementById(tableName);
		let headerTable = table.createTHead();
		let headerRowTable = table.insertRow(0);
		if (queryResults.length == 0) {
			let curHeaderCell = headerRowTable.insertCell(-1);
			curHeaderCell.innerHTML = "The query failed to return any results";
		}
		else {
			let tableHeaders = Object.keys(queryResults[0]).filter(word => headers.includes(word));
			let discardedHeaders = Object.keys(queryResults[0]).filter(word => !headers.includes(word));
			for (let i = 0; i < tableHeaders.length; ++i) {
				let curHeaderCell = headerRowTable.insertCell(-1);
				curHeaderCell.innerHTML = tableHeaders[i].replace(/_/g, " ");
			}
			let newInputs = [];
			for (let record in queryResults) {
				//NEED TO DELETE THIS FIELD WITHOUT DELEING GLOBAL INPUTS
				//THERE IS A BETTER WAY TO DO THIS
				let newRecord = {};
				tableHeaders.forEach(function (header) {
					let curRecord = queryResults[record];
					newRecord[header] = curRecord[header];
				});
				let recordsEqual = newInputs.map(curRecord => _.isEqual(newRecord, curRecord));
				if (!recordsEqual.includes(true)) {
					newInputs.push(newRecord);
				}
			}
			for (let record in newInputs) {
				let curRecord = newInputs[record];
				let recordValues = Object.values(newInputs[record]);
				let curRecordRow = table.insertRow(-1);
				for (let i = 0; i < tableHeaders.length; ++i) {
					let curRecordCell = curRecordRow.insertCell(-1);
					curRecordCell.innerHTML = recordValues[i];
				}
			}
		}
	}
	function constructClipboard(chosenFields) {
		let queryResults = JSON.parse(document.getElementById("queryResults").innerHTML);
		let clipboardContents = "";
		for (let curRecord in queryResults) {
			let record = queryResults[curRecord];
			for (let chosenField in chosenFields) {
				console.log(JSON.stringify(record[chosenFields[chosenField]]));
				if (record[chosenFields[chosenField]] != null){
					if (record[chosenFields[chosenField]].includes("\r")) {
						clipboardContents += "\t" + record[chosenFields[chosenField]].replace(/\r/g, ", ");
					} else {
						clipboardContents += "\t" + record[chosenFields[chosenField]];
					}
				}
			}
			clipboardContents += "\n";
		}
		document.getElementById("clipboard").innerHTML = clipboardContents;
	}

</script>