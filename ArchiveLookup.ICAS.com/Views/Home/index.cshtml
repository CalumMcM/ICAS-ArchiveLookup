@{
	ViewBag.Title = "Finance";
}

<div class="jumbotron">

	<h1>
		Finance Lookup
	</h1>
	<p>Select the criteria for your search: </p>

	<button id="idInputButton" onclick="showInput('idInput')" class="addBtn">IMIS ID</button>
	<button id="mkInputButton" onclick="showInput('mkInput')" class="addBtn">Member No.</button>
	<button id="studnoInputButton" onclick="showInput('studnoInput')" class="addBtn">Student No.</button>
	<button id="forenameInputButton" onclick="showInput('forenameInput')" class="addBtn">First Name</button>
	<button id="middlenameInputButton" onclick="showInput('middlenameInput')" class="addBtn">Middle Name</button>
	<button id="surnameInputButton" onclick="showInput('surnameInput')" class="addBtn">Last Name</button>
	<button id="firmidInputButton" onclick="showInput('firmidInput')" class="addBtn">Firm ID</button>
	<button id="firmnoInputButton" onclick="showInput('firmnoInput')" class="addBtn">Firm No.</button>
	<button id="firmnameInputButton" onclick="showInput('firmnameInput')" class="addBtn">Firm Name</button>
	<button id="companynameInputButton" onclick="showInput('companynameInput')" class="addBtn">Company Name</button>
	<button id="refInputButton" onclick="showInput('refInput')" class="addBtn">Invoice Reference No.</button>


	<p id="idInputText" class="lead">
		IMIS ID:
		<input type="text" id="idInput" class="input-lookup" name="id">
	</p>

	<p id="mkInputText" class="lead">
		Member No.:
		<input type="text" id="mkInput" class="input-lookup" name="mk">
	</p>

	<p id="studnoInputText" class="lead">
		Student No:
		<input type="text" id="studnoInput" class="input-lookup" name="studno">
	</p>

	<p id="forenameInputText" class="lead">
		First Name:
		<input type="text" id="forenameInput" class="input-lookup" name="forename">
	</p>

	<p id="middlenameInputText" class="lead">
		Middle Name:
		<input type="text" id="middlenameInput" class="input-lookup" name="middlename">
	</p>

	<p id="surnameInputText" class="lead">
		Last Name:
		<input id="surnameInput" type="text" class="input-lookup" name="surname">
	</p>

	<p id="firmidInputText" class="lead">
		Firm ID:
		<input type="text" id="firmidInput" class="input-lookup" name="firmid">
	</p>

	<p id="firmnoInputText" class="lead">
		Firm No:
		<input type="text" id="firmnoInput" class="input-lookup" name="firmno">
	</p>

	<p id="firmnameInputText" class="lead">
		Firm Name:
		<input type="text" id="firmnameInput" class="input-lookup" name="firmname">
	</p>

	<p id="companynameInputText" class="lead">
		Company Name:
		<input type="text" id="companynameInput" class="input-lookup" name="companyname">
	</p>

	<p id="refInputText" class="lead">
		Invoice Reference No:
		<input type="text" id="refInput" class="input-lookup" name="ref">
	</p>

	<div class="copySelectDropdown">
		<p><button id="submitButton" onClick="processQuery()" class="btn btn-primary btn-lg">Submit</button></p>
		<div id="loadingIcon" class="lds-roller"><div></div><div></div><div></div><div></div><div></div><div></div><div></div><div></div></div>
	</div>

	<div id="tabBar" class="tab">
		<button class="tablinks" onclick="changeTab(event, 'Customers')">Customers</button>
		<button class="tablinks" onclick="changeTab(event, 'Invoices')">Invoices</button>
		<button class="tablinks" onclick="changeTab(event, 'Transactions')">Transactions</button>
		<button class="tablinks" onclick="changeTab(event, 'Activity')">Activity</button>
		<button class="tablinks" onclick="changeTab(event, 'CustomerNotes')">Customer Notes</button>
	</div>

	<div id="Customers" class="tabcontent">
		<div class="copySelectDropdown">
			<button id="CustomerscopyButton" onclick="copy('Customers')" class="copyBtn">&#x1F4CB</button>
			<button id="CustomerscopySelectButton" onclick="showCopyDropdown('Customers')" class="copyBtn">+</button>
			<div id="CustomersDropdown" class="copySelectDropdown-content">
				<button id="mkCCopyButton" onclick="copySelectButton('mkCCopy', 'Customers')" class="addBtn">Member No.</button>
				<button id="surnameCCopyButton" onclick="copySelectButton('surnameCCopy', 'Customers')" class="addBtn">Last Name</button>
				<button id="forenameCCopyButton" onclick="copySelectButton('forenameCCopy', 'Customers')" class="addBtn">First Name</button>
				<button id="middlenameCCopyButton" onclick="copySelectButton('middlenameCCopy', 'Customers')" class="addBtn">Middle Name</button>
				<button id="studnoCCopyButton" onclick="copySelectButton('studnoCCopy', 'Customers')" class="addBtn">Student No</button>
				<button id="mtCCopyButton" onclick="copySelectButton('mtCCopy', 'Customers')" class="addBtn">Member Type</button>
				<button id="catCCopyButton" onclick="copySelectButton('catCCopy', 'Customers')" class="addBtn">Category</button>
				<button id="titleCCopyButton" onclick="copySelectButton('titleCCopy', 'Customers')" class="addBtn">Title</button>
				<button id="cityCCopyButton" onclick="copySelectButton('cityCCopy', 'Customers')" class="addBtn">City</button>
				<button id="countyCCopyButton" onclick="copySelectButton('countyCCopy', 'Customers')" class="addBtn">County</button>
				<button id="compsortCCopyButton" onclick="copySelectButton('compsortCCopy', 'Customers')" class="addBtn">Company Sort</button>
				<button id="addrCCopyButton" onclick="copySelectButton('addrCCopy', 'Customers')" class="addBtn">Full Address</button>
				<button id="firmnoCCopyButton" onclick="copySelectButton('firmnoCCopy', 'Customers')" class="addBtn">Main Firm No</button>
			</div>
		</div>
		<div id="CustomersContainer" class="minotron">
			<table id="CustomersResultsTable" class="resultsTable">
				<tr></tr>
			</table>
		</div>
	</div>

	<div id="Invoices" class="tabcontent">
		<div class="copySelectDropdown">
			<button id="InvoicescopyButton" onclick="copy('Invoices')" class="copyBtn">&#x1F4CB</button>
			<button id="InvoicescopySelectButton" onclick="showCopyDropdown('Invoices')" class="copyBtn">+</button>
			<div id="InvoicesDropdown" class="copySelectDropdown-content">
				<button id="mkICopyButton" onclick="copySelectButton('mkICopy', 'Invoices')" class="addBtn">Member No.</button>
				<button id="invdateICopyButton" onclick="copySelectButton('invdateICopy', 'Invoices')" class="addBtn">Invoice Date</button>
				<button id="refnumICopyButton" onclick="copySelectButton('refnumICopy', 'Invoices')" class="addBtn">Reference Num</button>
				<button id="invdescICopyButton" onclick="copySelectButton('invdescICopy', 'Invoices')" class="addBtn">Invoice Description</button>
				<button id="chargesICopyButton" onclick="copySelectButton('chargesICopy', 'Invoices')" class="addBtn">Charges</button>
				<button id="credICopyButton" onclick="copySelectButton('credICopy', 'Invoices')" class="addBtn">Credits</button>
				<button id="balICopyButton" onclick="copySelectButton('balICopy', 'Invoices')" class="addBtn">Balance</button>
				<button id="noteICopyButton" onclick="copySelectButton('noteICopy', 'Invoices')" class="addBtn">Note</button>
			</div>
		</div>
		<div id="InvoicesContainer" class="minotron">
			<table id="InvoicesResultsTable" class="resultsTable">
				<tr></tr>
			</table>
		</div>
	</div>

	<div id="Transactions" class="tabcontent">
		<div class="copySelectDropdown">
			<button id="TransactionscopyButton" onclick="copy('Transactions')" class="copyBtn">&#x1F4CB</button>
			<button id="TransactionscopySelectButton" onclick="showCopyDropdown('Transactions')" class="copyBtn">+</button>
			<div id="TransactionsDropdown" class="copySelectDropdown-content">
				<button id="mkTCopyButton" onclick="copySelectButton('mkTCopy', 'Transactions')" class="addBtn">Member No.</button>
				<button id="transdateTCopyButton" onclick="copySelectButton('transdateTCopy', 'Transactions')" class="addBtn">Transaction Date</button>
				<button id="refnumTCopyButton" onclick="copySelectButton('refnumTCopy', 'Transactions')" class="addBtn">Reference Num</button>
				<button id="transtypeTCopyButton" onclick="copySelectButton('transtypeTCopy', 'Transactions')" class="addBtn">Transaction Type</button>
				<button id="transdescTCopyButton" onclick="copySelectButton('transdescTCopy', 'Transactions')" class="addBtn">Transaction Description</button>
				<button id="amountTCopyButton" onclick="copySelectButton('amountTCopy', 'Transactions')" class="addBtn">Transaction Amount</button>
			</div>
		</div>
		<div id="TransactionsContainer" class="minotron">
			<table id="TransactionsResultsTable" class="resultsTable">
				<tr></tr>
			</table>
		</div>
	</div>
	<div id="Activity" class="tabcontent">
		<div class="copySelectDropdown">
			<button id="ActivitycopyButton" onclick="copy('Activity')" class="copyBtn">&#x1F4CB</button>
			<button id="ActivitycopySelectButton" onclick="showCopyDropdown('Activity')" class="copyBtn">+</button>
			<div id="ActivityDropdown" class="copySelectDropdown-content">
				<button id="mkACopyButton" onclick="copySelectButton('mkACopy', 'Activity')" class="addBtn">Member No.</button>
				<button id="transACopyButton" onclick="copySelectButton('transACopy', 'Activity')" class="addBtn">Transaction Date</button>
				<button id="typeACopyButton" onclick="copySelectButton('typeACopy', 'Activity')" class="addBtn">Activity Type</button>
				<button id="descACopyButton" onclick="copySelectButton('descACopy', 'Activity')" class="addBtn">Description</button>
				<button id="prodcodeACopyButton" onclick="copySelectButton('prodcodeACopy', 'Activity')" class="addBtn">Product Code</button>
				<button id="unitsACopyButton" onclick="copySelectButton('unitsACopy', 'Activity')" class="addBtn">Units</button>
				<button id="thrudateACopyButton" onclick="copySelectButton('thrudateACopy', 'Activity')" class="addBtn">Thru Date</button>
				<button id="amountACopyButton" onclick="copySelectButton('amountACopy', 'Activity')" class="addBtn">Amount</button>
			</div>
		</div>
		<div id="ActivityContainer" class="minotron">
			<table id="ActivityResultsTable" class="resultsTable">
				<tr></tr>
			</table>
		</div>
	</div>

	<div id="CustomerNotes" class="tabcontent">
		<div class="copySelectDropdown">
			<button id="CustomerNotescopyButton" onclick="copy('CustomerNotes')" class="copyBtn">&#x1F4CB</button>
			<button id="CustomerNotescopySelectButton" onclick="showCopyDropdown('CustomerNotes')" class="copyBtn">+</button>
			<div id="CustomerNotesDropdown" class="copySelectDropdown-content">
				<button id="mkCNCopyButton" onclick="copySelectButton('mkCNCopy', 'CustomerNotes')" class="addBtn">Member No.</button>
				<button id="lastfirstCNCopyButton" onclick="copySelectButton('lastfirstCNCopy', 'CustomerNotes')" class="addBtn">Last First</button>
				<button id="middlenameCNCopyButton" onclick="copySelectButton('middlenameCNCopy', 'CustomerNotes')" class="addBtn">Middle Name</button>
				<button id="commentsCNCopyButton" onclick="copySelectButton('commentsCNCopy', 'CustomerNotes')" class="addBtn">Comments</button>
			</div>
		</div>
		<div id="CustomerNotesContainer" class="minotron">
			<table id="CustomerNotesResultsTable" class="resultsTable">
				<tr></tr>
			</table>
		</div>
	</div>

	<p id="clipboard" class="clipboard"></p>
	<p id="financeQueryResults" class="queryResults"></p>
	<p id="customerQueryResults" class="queryResults"></p>
	<p id="queriesLoaded" class="queryResults"></p>
</div>
<script src="~/Scripts/moment.js" type="text/javascript"></script>
<script src="~/Scripts/jquery-1.10.2.min.js" type="text/javascript"></script>
<script src="~/Scripts/lodashCore.js" type="text/javascript"></script>
<script src="~/Scripts/common.js" type="text/javascript"></script>
<script>
	/*
	Returns: A list of all input button names
	Remarks: Button names must be in exact same position as its field name
	in getClassNames();
	*/
	const getBtnNames = () =>["id", "mk", "studno", "forename", "middlename", "surname", "firmid", "firmno", "firmname", "companyname", "ref"];
	/*
	Inputs: The field names for the corresponding button
	Remarks: These are the fields that users can search by
	*/
	const getClassNames = () =>["ID", "MAJOR_KEY", "STUDENT_NO", "FIRST_NAME", "MIDDLE_NAME", "LAST_NAME", "FIRM_ID", "MAIN_FIRM_NO", "FIRM_NAME", "Company", "REFERENCE_NUM"];
	/*
	Inputs: table - A name of a table
	Returns: The names of each of the copy buttons for that table
	Remarks: Button names should be in same position as their corresponding
	field name in getCopyFields()
	*/
	function getCopyBtnNames(table) {
		switch (table) {
			case "Customers": return ["mkC", "surnameC", "forenameC", "middlenameC","studnoC", "mtC", "catC", "titleC", "cityC", "countyC", "compsortC", "addrC", "firmnoC"];
			case "Invoices": return ["mkI", "invdateI", "refnumI", "invdescI", "chargesI", "credI", "balI", "noteI"];
			case "Transactions": return ["mkT", "transdateT", "refnumT", "transtypeT", "transdescT", "amountT"]
			case "Activity": return ["mkA", "transA", "typeA", "descA", "prodcodeA", "unitsA", "thrudateA", "amountA"];
			case "CustomerNotes": return ["mkCN", "lastfirstCN", "middlenameCN", "commentsCN"];
				defualt: return [];
		}
	}
	/*
	Inputs: table - A name of a table
	Returns: The names of each of the field names for that table
	Remarks: Field names should be in the exact same position as its button name in 
	getCopyBtnNames()
	*/
	function getCopyFields(table) {
		switch (table) {
			case "Customers": return ["MEMBER_NO", "LAST_NAME", "FIRST_NAME", "MIDDLE_NAME", "STUDENT_NO", "MEMBER_TYPE", "CATEGORY", "TITLE", "CITY", "COUNTY", "COMPANY_SORT", "FULL_ADDRESS", "MAIN_FIRM_NO"];
			case "Invoices": return ["MEMBER_NO", "INVOICE_DATE", "REFERENCE_NUM", "INVOICE_DESCRIPTION", "CHARGES", "CREDITS", "BALANCE", "NOTE"];
			case "Transactions": return ["MEMBER_NO", "TRANS_TRANSACTION_DATE", "REFERENCE_NUM", "TRANSACTION_TYPE", "TRANSACTION_DESCRIPTION", "TRANSACTION_AMOUNT"]
			case "Activity": return ["MEMBER_NO", "TRANSACTION_DATE", "ACTIVITY_TYPE", "DESCRIPTION", "PRODUCT_CODE", "UNITS", "THRU_DATE", "AMOUNT"]
			case "CustomerNotes": return ["MEMBER_NO", "LAST_FIRST", "MIDDLE_NAME", "COMMENTS"];
				defualt: return [];
		}
	}
	/*
	Remarks: Construct the query object by reading the contents of text fields where the corresponding button is
	green and send the query object to the person controller if one of the required fields are selected then
	to the finance query also
	*/
	function processQuery() {
		document.getElementById("loadingIcon").style.display = "block";
		document.getElementById("queriesLoaded").innerHTML = 0;
		let btnNames = getBtnNames();
		let classNames = getClassNames();
		let inputs = {}
		let dateTypesObjects = $('input[type=date]').map(function () { return this.id; }).get();
		for (let button in btnNames) {
			if (document.getElementById(btnNames[button] + "InputButton").style.backgroundColor == "rgb(32, 166, 75)") {
				if (dateTypesObjects.includes(btnNames[button] + "input")) {
					inputs[classNames[button]] = moment(document.getElementById(btnNames[button] + "Input").value).format('YYYY-MM-DDT00:00:00');
				}
				else {
					if (btnNames[button] + "Input")
						inputs[classNames[button]] = document.getElementById(btnNames[button] + "Input").value;
				}
			}
		}
		if (inputs.hasOwnProperty("ID") || inputs.hasOwnProperty("MAJOR_KEY") || inputs.hasOwnProperty("STUDENT_NO") || inputs.hasOwnProperty("MAIN_FIRM_NO") || inputs.hasOwnProperty('REFERENCE_NUM')) {
			let financeQuery = new XMLHttpRequest();
			financeQuery.open("POST", 'api/finance', true);
			financeQuery.onreadystatechange = function () {
				if (this.readyState == 4 && this.status == 200) {
					var financeQueryResults = this.response
					financeQueryResults = $.parseJSON(financeQueryResults);
					document.getElementById("queriesLoaded").innerHTML = document.getElementById("queriesLoaded").innerHTML + 1
					displayResultsFinance(financeQueryResults);
					document.getElementById("financeQueryResults").innerHTML = JSON.stringify(financeQueryResults);
				}
			};
			financeQuery.setRequestHeader('Content-Type', 'application/json');
			financeQuery.send(JSON.stringify(inputs));
		} else {
			document.getElementById("queriesLoaded").innerHTML = document.getElementById("queriesLoaded").innerHTML + 1
			displayResultsFinance("Invalid Search Criteria");
		}
		let customerQuery = new XMLHttpRequest();
		customerQuery.open("POST", 'api/person', true);
		customerQuery.onreadystatechange = function () {
			if (this.readyState == 4 && this.status == 200) {
				var customerQueryResults = this.response
				customerQueryResults = $.parseJSON(customerQueryResults);
				document.getElementById("queriesLoaded").innerHTML = document.getElementById("queriesLoaded").innerHTML + 1
				displayResultsCustomer(customerQueryResults);
				document.getElementById("customerQueryResults").innerHTML = JSON.stringify(customerQueryResults);
			}
		};
		customerQuery.setRequestHeader('Content-Type', 'application/json');
		customerQuery.send(JSON.stringify(inputs));
	}
	/*
	Inputs: inputs - The query results from the controller
	Remarks: If the other query has already finished then hides the loading icon.
	Calls the method to wipe the data in all the tables and then calls the method
	to populate the tables with the appropriate header fields
	*/
	function displayResultsFinance(inputs) {
		document.getElementById("tabBar").style.display = "block";
		if (document.getElementById("queriesLoaded").innerHTML > 1) {
			document.getElementById("loadingIcon").style.display = "none";
		}
		tableDemolisherAndDisplayer("Invoices");
		tableDemolisherAndDisplayer("Transactions");
		tableBuilder(inputs, "InvoicesResultsTable", ["MEMBER_NO", "INVOICE_DATE", "REFERENCE_NUM", "INVOICE_DESCRIPTION", "CHARGES", "CREDITS", "BALANCE", "NOTE"])
		tableBuilder(inputs, "TransactionsResultsTable", ["TRANS_TRANSACTION_DATE", "REFERENCE_NUM", "MEMBER_NO", "TRANSACTION_NUMBER", "TRANSACTION_TYPE", "TRANSACTION_AMOUNT", "TRANSACTION_DESCRIPTION"])
	}
	/*
	Inputs: inputs - The query results from the controller
	Remarks: If the other query has already finished then hides the loading icon.
	Calls the method to wipe the data in all the tables and then calls the method
	to populate the tables with the appropriate header fields
	*/
	function displayResultsCustomer(inputs) {
		document.getElementById("tabBar").style.display = "block";
		if (document.getElementById("queriesLoaded").innerHTML > 1) {
			document.getElementById("loadingIcon").style.display = "none";
		}
		tableDemolisherAndDisplayer("Activity");
		tableDemolisherAndDisplayer("Customers");
		tableDemolisherAndDisplayer("CustomerNotes");
		let customerResultsTable = ["MEMBER_NO", "MEMBER_TYPE", "STUDENT_NO", "CATEGORY", "FIRST_NAME", "MIDDLE_NAME", "LAST_NAME", "TITLE", "MAIN_FIRM_NO", "CITY", "COUNTY", "COMPANY_SORT", "FULL_ADDRESS"];
		tableBuilder(inputs, "ActivityResultsTable", ["MEMBER_NO", "TRANSACTION_DATE", "ACTIVITY_TYPE", "PRODUCT_CODE", "DESCRIPTION", "THRU_DATE", "AMOUNT", "UNITS"]);
		tableBuilder(inputs, "CustomersResultsTable", customerResultsTable)
		tableBuilder(inputs, "CustomerNotesResultsTable", ["MEMBER_NO", "LAST_FIRST", "MIDDLE_NAME", "COMMENTS"])
	}
	/*
	Inputs: queryResults - The object returned from the Controller | tableName - The table to be populated | headers - The chosen fields for said table
	Remarks: If queryResults is empty then display message saying such or if finance query was not run then display why.
	Else create a header row to the table and append the headers to it. Then fill each appropriate field value to its 
	corresponding header until all records are displayed,
	ensuring that duplicate records are not displayed
	*/
	function tableBuilder(queryResults, tableName, headers) {
		let table = document.getElementById(tableName);
		let headerTable = table.createTHead();
		let headerRowTable = table.insertRow(0);
		if (queryResults.length == 0) {
			let curHeaderCell = headerRowTable.insertCell(-1);
			curHeaderCell.innerHTML = "The query failed to return any results";
		}
		if (queryResults === "Invalid Search Criteria") {
			let curHeaderCell = headerRowTable.insertCell(-1);
			curHeaderCell.innerHTML = "To get results here append one or more of; ID, Invoice Reference No., Member No., Student No. or Firm No. to your search";
		}
		else {
			let tableHeaders = Object.keys(queryResults[0]).filter(word => headers.includes(word));
			let discardedHeaders = Object.keys(queryResults[0]).filter(word => !headers.includes(word));
			for (let i = 0; i < tableHeaders.length; ++i) {
				let curHeaderCell = headerRowTable.insertCell(-1);
				curHeaderCell.innerHTML = tableHeaders[i].replace(/_/g, " ");
			}
			let newInputs = [];
			for (let record in queryResults) {
				let newRecord = {};
				tableHeaders.forEach(function (header) {
					let curRecord = queryResults[record];
					newRecord[header] = curRecord[header];
				});
				let recordsEqual = newInputs.map(curRecord => _.isEqual(newRecord, curRecord));
				if (!recordsEqual.includes(true)) {
					newInputs.push(newRecord);
				}
			}
			for (let record in newInputs) {
				let curRecord = newInputs[record];
				let recordValues = Object.values(newInputs[record]);
				let curRecordRow = table.insertRow(-1);
				for (let i = 0; i < tableHeaders.length; ++i) {
					let curRecordCell = curRecordRow.insertCell(-1);
					curRecordCell.innerHTML = recordValues[i];
				}
			}
		}
	}
	/*
	Inputs: table - The table name that is to be copied
	Remarks: If no copy buttons selected then copy all fields, otherwise construct the contents for the clipboard
	so that it only has those fields which are selected
	*/
	function copy(table) {
		let btnNames = getCopyBtnNames(table);
		let classNames = getCopyFields(table);
		let chosenFields = [];
		for (let button in btnNames) {
			if (document.getElementById(btnNames[button] + "CopyButton").style.backgroundColor == "rgb(32, 166, 75)") {
				chosenFields.push(classNames[button]);
			}
		}
		if (chosenFields.length == 0) {
			chosenFields = classNames;
		}
		constructClipboard(chosenFields, table);
		let clipboardContents = document.getElementById("clipboard").innerHTML;
		let itemsToCopy = document.createElement("textarea");
		document.body.appendChild(itemsToCopy);
		itemsToCopy.value = clipboardContents;
		itemsToCopy.select();
		document.execCommand("copy");
		console.log("copied!");
		document.body.removeChild(itemsToCopy);
		document.getElementById(table + "copyButton").innerHTML = '&#10004';
	}
	/*
	Inputs: chosenFields - The selected fields that are to be copied | table - the current table that is to be copied
	Remarks: Adds the fields to the clipboardContents string. Removing special characters, 
	adding a tab after every field value and a new line after every record.
	*/
	function constructClipboard(chosenFields, table) {
		let financeTables = ["Invoices", "Transactions"];
		let queryResults = "";
		if (financeTables.includes(table)) {
			queryResults = JSON.parse(document.getElementById("financeQueryResults").innerHTML);
		} else {
			queryResults = JSON.parse(document.getElementById("customerQueryResults").innerHTML);
		}
		let clipboardContents = "";
		console.log(table);
		let rowsInTable = document.getElementById(table+"ResultsTable").rows.length; 
		for (let curRecord = 0; curRecord < rowsInTable - 1; ++curRecord) {
			let record = queryResults[curRecord];
			for (let chosenField in chosenFields) {
				if (record[chosenFields[chosenField]] != null) {
					if (record[chosenFields[chosenField]].includes("\r") || record[chosenFields[chosenField]].includes("\n")) {
						let clipboardRecord = record[chosenFields[chosenField]].replace(/\r/g, ", ");
						clipboardRecord = clipboardRecord.replace(/\n/g, ", ");
						clipboardContents += "\t" + clipboardRecord;
					} else {
						clipboardContents += "\t" + record[chosenFields[chosenField]];
					}
				} else {
					clipboardContents += "\t";
				}
			}
			clipboardContents += "\n";
		}
		document.getElementById("clipboard").innerHTML = clipboardContents;
	}

</script>